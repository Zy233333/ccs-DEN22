#ifndef _FRN_LIB_PRIMITIVES_PRG_H
#define _FRN_LIB_PRIMITIVES_PRG_H

#include <wmmintrin.h>

#include <stdexcept>
#include <vector>

/**
 * @brief 64 bit nonce which is appended to the counter in the PRG.
 */
#ifndef PRG_NONCE
#define PRG_NONCE 0x0123456789ABCDEF
#endif

/**
 * @brief The initial value of the PRG counter.
 */
#ifndef PRG_INITIAL_COUNTER
#define PRG_INITIAL_COUNTER 0
#endif

namespace frn::lib {
namespace primitives {

/**
 * @brief Pseudorandom generator.
 *
 * The <code>PRG</code> class implements a pseudorandom generator based on
 * AES-CTR where the n'th block of output is generated by encrypting a
 * counter. A block of random data is generated by computing
 *
 *   <code>block := AES(seed, counter)</code>
 *
 * where <code>seed</code> is either all 0s or a user supplied value, and
 * <code>counter</code> is a 128-bit counter initialized to be
 *
 *  <code>counter_init := PRG_NONCE || 0 ... 0</code>
 *
 * where each half is 64 bits. The value of PRG_NONCE can be set by defining it
 * as a macro. It defaults to <code>0x0123456789ABCDEF</code>.
 */
class PRG {
 public:
  /**
   * @brief The size of an output block.
   */
  static constexpr std::size_t BlockSize() { return sizeof(BlockType); };

  /**
   * @brief The size of the seed.
   */
  static constexpr std::size_t SeedSize() { return BlockSize(); };

  /**
   * @brief Construct a new <code>PRG</code> object with seed of 0.
   */
  PRG();

  /**
   * @brief Construct a new <code>PRG</code> with a given seed.
   *
   * @param seed the seed.
   *
   * @pre This constructor reads <code>seed_size()</code> bytes from
   * <code>seed</code> so the latter must point to that much allocated space.
   */
  PRG(const unsigned char *seed);

  /**
   * @brief Reset the PRG to its initial state.
   */
  void Reset();

  /**
   * @brief Generate random data and store it in a supplied location.
   *
   * @param dest the destination of the generated random bytes.
   * @param nbytes how many bytes of random data to generate.
   *
   * @pre <code>dest</code> must point to <code>nbytes</code> of allocated
   * space.
   *
   * @throws std::runtime_error if allocation of roughly <code>nbytes</code>
   * bytes of memory fails.
   */
  void Next(unsigned char *dest, std::size_t nbytes);

  /**
   * @brief Generate random data and store it in a supplied
   * <code>std::vector</code>.
   *
   * @param dest the destination vector.
   *
   * @throws std::runtime_error if allocation of roughly
   * <code>dest.size()</code> bytes of memory fails.
   */
  void Next(std::vector<unsigned char> &dest) {
    Next(dest.data(), dest.size());
  };

  /**
   * @brief Generate random data and store it in a supplied
   * <code>std::vector</code>.
   *
   * @param dest the destination vector.
   * @param nbytes how many bytes to generate.
   *
   * @throws std::runtime_error if <code>dest</code> does not have sufficient
   * space.
   * @throws std::runtime_error if allocation of roughly <code>nbytes</code>
   * of memory fails.
   */
  void Next(std::vector<unsigned char> &dest, std::size_t nbytes) {
    if (dest.size() < nbytes)
      throw std::runtime_error("nbytes exceeds dest.size().");
    Next(dest.data(), nbytes);
  };

  /**
   * @brief The seed of the PRG.
   */
  const unsigned char *Seed() const { return mSeed; };

  /**
   * @brief The current counter of the PRG.
   */
  long Counter() const { return mCounter; };

 private:
  using BlockType = __m128i;

  void Update(void);
  void Init(void);

  unsigned char mSeed[sizeof(BlockType)] = {0};
  long mCounter = PRG_INITIAL_COUNTER;
  BlockType mState[11];
};

}  // namespace primitives
}  // namespace frn::lib

#endif  // _FRN_LIB_PRIMITIVES_PRG_H
